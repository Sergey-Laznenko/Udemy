'use strict'

const a = 5 // глобальная переменная

function myFn() {     // функция 1я (глобальная)
  function innerFn(){ // вложенная функция 2 (локальная)
    console.log(a)    // тело вложенной функции 2
  }
  return innerFn()    // возврат результата вложенной функции 2, можно без return
}

myFn()  // вызов 1й глобальной функции

//! вызов локальной функции innerFn() приведёт к ошибке, так как она видна(и можно вызвать) только в рамках 1й глобальной функции

let x // объявление в глобальной видимости
let y // объявление в глобальной видимости

function myFnTwo() {  // объявление функции
  let y   // объявление в ЛОКАЛЬНОЙ видимости
  x = true  // присвоение значения глобальной переменной, так как внутри она не объявлена, переменная будет взята из глобальной видимости (!!! НЕ рекмендуется изменять значение ГЛОБАЛЬНЫХ переменных внутри каких либо функций !!!)
  y = 10  // присвоение значения локальной переменной, так как она была объявлена локально( внутри функции)
  console.log(x)
}

myFnTwo() // Вызов функции

console.log(x)  // имеет значение true, так как в функции было присвоено значение глобальной переменной, всвязи с отсуствием локальной
console.log(y) // имеет значение undefined, так как значение было присвоено внутри функции(локально) и зона видимости данного присвоенного значения внутри функции, ИСКЛЮЧИТЕЛЬНО внутри той функции внутри которой она объявлена

//! Переменные, объявленные с помощью const или let внутри блока, {внутри данных скобок}, имеют область видимости, ограниченную этим самым блоком, они своего рода привязаны к блоку, в котором объявлены

function myFnThree() {
  a = true      // объявление переменной (которой нет НИ в глобальной видимости, НИ в локальной)
  console.log(a)  //! Такое объявление КРАЙНЕ НЕ РЕКОМЕНДУЕТСЯ, так как она автоматически будет создана в глобальной видимости, что приведёт к сложностям в дальнейшем написании кода
}

myFnThree

console.log(a)