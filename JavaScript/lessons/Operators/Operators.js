
// 1. Арифметические операторы --> +,-,*,/

// 2. Операторы сравнения --> ===(равно), !==(не равно), <=(меньше или равно), >=(больше или равно)

// 3. Логические операторы --> !(не), !!(не не), &&(и), ||(или)

// 4. Оператор присваивания --> =

// 5. Текстовые операторы --> typeof(проверить тип значения), instanceof(проверка объекта на предмет принадлежности к тому или иному классу), new, delete(удалить свойство объекта)

// 6. Оператор запятая --> ,(позволяет объявить несколько переменных(перечисляя)), так делать не рекомендуется


//! Примеры арифметических операторов

let a,b // объявление сразу 2х переменных через','

a = 10  // оператор присваивания
b = a   // оператор присваивания

let c = a + b // объявление новой переменной и присваивание значения, результатом которого является действие оператора '+'

console.log(c)  // 20

//! Примеры УНАРНЫХ операторов
//? Унарные операторы всегда имеют ОДИН операнд(аргумент)

a++   // увеличивает значение на 1
+a    // можно конвертировать строку в число
delete Object.a   // позволяет удалить свойство объекта
typeof a  // можно узнать тип переменной
new Object()  // можно создать новый экземпляр объекта который уже существует

//! Примеры БИНАРНЫХ операторов
//? Бинарные операторы всегда имеют ДВА операнда(аргумента)

a = 5     //присваивание значения
a + b     // складывание значений
a += 5    // увеличение значение на5 и присваивание результата увеличения переменной
a === b   // оператор сравнения переменных (как тип так и значение) если разный типы данных, будет ошибка
a && b    // логический оператор

//! Инфиксная запись
//? когда оператор находится между операндами

a = true  // оператор присваивания
a + b     //  оператор +
a += 5    //  оператор увеличения и присваивания
a || b    // оператор 'или'
a > b     // оператор больше

//! Префиксная запись
//? оператор стоит перед операндом

++a   //
delete Object.a   //
typeof a    // 

//! Постфиксная запись
//? оператор стоит после операнда

a++
myFunction()  // Вызов функции


 //! Ложные значения в JavaScript

//? Boolean(value) -> false

 // 1. false
 // 2. 0
 // 3. ' '
 // 4. underfined
 // 5. null

 // Пример использования !
!10 // false
!0   // true
!'abc'  // false
!'' // true
!true // false
!undefined  // true

// Пример использования !!(двойного отрицания)
!! 10   // true
!! 0    //false
!!'abc' // true
!!''    //false
!!true  //true
!!undefined //false

// Пример использования &&(и) и ||(или) 
// Выражение 1 && Выражение 2 --> если выражение 1 ложно(любое ложное, не true значение), выражение 2 ИГНОРИРУЕТСЯ,  и возвращается ПЕРВОЕ НАЙДЕННОЕ ЛОЖНОЕ ВЫРАЖЕНИЕ, так как сравниваются 2 выражения ВМЕСТЕ, если хоть одно НЕ ВЕРНО, то во втором НЕТ СМЫСЛА, называют Оператором короткого замыкания, то есть перебирает до тех пор, пока не найдёт ложь
// Выражение 1 || Выражение 2 --> если выражение 1 или выражение 2 истина, то возвращает 1е найденное true значение, будет перебирать до первого найденного true значения


//! Оператор разделения ОБЪЕКТА на свойства --> ... <-- Позволяет создавать новые объекты копируя не ссылки, а именно свойства других объектов, иными словами объединяя в себе(новом объекте) свойства других/ого объекта ( при условии что у исходных объектов НЕ БЫЛО вложенных объектов)

const button = {  // объект button, с двумя свойствами
  width: 200,
  text: 'Buy'
}

// Чтобы создать новый объект и добавть туда новое свойство
const redButton = { // создаём новый объект
  ...button,  // используем оператор разделения на свойства и название объекта, свойства которого мы разделяем и куда добавляем новое свойство с последующим созданием(не копированием ссылки) НОВОГО объекта
  color: 'red' // добавление нового свойства, если данное свойство уже существует, то оно заменится
}

console.table(redButton)

//? можно создать новый объект объединив 2 разных объекта

const buttonInfo = {    // 1й объект
  text: 'Buy'
}

const buttonStyle = {   // 2й объект
  color: 'yellow',
  width: 200,
  height: 300
}

const buttonNew ={   // 3й новый объект
  ...buttonInfo,  // копирование свойств(не ссылок) 1го объекта
  ...buttonStyle  // копирование свойств(не ссылок) 2го объекта
}

console.table(buttonNew)

