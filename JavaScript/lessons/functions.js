let a = 5
let b = 3

c = a + b       // Одинаковые
console.log(c)  // Блоки

let ab = 8
let ba = 12

c = ab + ba     //  Одинаковые
console.log(c)  //  Блоки

// Не рекомендуется использовать одинаковые блоки, для подобного решения нужно использовать функции

let d = 5
let e = 3

function sum(x, y) {  //Функция sum с параметрами x и y
  const f = x + y     //Условия функции sum
  console.log(f)      //Вывод результата функции sum 
}

let h = 5
let j = 3

sum(h, j)


// Функция может быть...

// 1. Именованной
// 2. Анонимной
// 3. Присвоена переменной
// 4. Аргументом при вызове другой функции
// 5. Значением свойства(метода) объекта


                    //*1.Именные

function myFn(a, b) { // Название и параметры функции
  let c               // тело функции
  a = a + 1           // тело функции
  c = a + b           // тело функции
  return c            // тело функции после return функция прекращает выполнение дальнейших инструкций
}

// ! параметры задаются при определении функции (a, b), а аргументы при вызове функции (x, y)

console.log(myFn(5, 6))

let x = 10
let y = 9

myFn(x, y)  // Вызов функции и передаваемые аргументы

console.log(myFn(x, y)) // Вывод на экран результата функции

//! Передача значения по ссылке. Не рекомендуется мутировать объект внутри функции

const personOne = { // Объект
  name: 'Bob',
  age: 25
}

function increasePersonAge(x) { // объявляем функцию и параметр
  x.age += 1  // добавляем свойству age значение +1
  return x    // возвращаем результат
}

increasePersonAge(personOne)  // вызываем объявленную функцию и передаём аргументом наш объект personOne
console.log(personOne)  // выводим полученный результат

//! Рекомендуется внутри функции создать копию объекты (не ссылки) и его уже изменять и возвращать результат ввиде нового изменённого объекта

const personTwo = {
  name: 'Sergey',
  age: 38
}

function increasePersonAge2(x) {    // Объявляем функцию
  const updatePerson = Object.assign({}, x) // создаём новую переменную и в неё ложим копию объекта
  updatePerson.age += 1 // изменяем значение свойства объекта
  return updatePerson // возвращаем новый изменённый объект
}

const updatedPersonTwo = increasePersonAge2(personTwo) // создаём переменную и присваиваем ей значение вызова функции
console.log(personTwo.age)  // выводим на экран значение свойства первого объекта
console.log(updatedPersonTwo.age) // выводим на экран значение свойства нового объекта изменённого посредством нашей функции

//? CallBack функции, цель такой функции вызвать одну функцию посредством другой

function someFunction(){    // объявдяем функцию
  // действия
}

function fnWithCallBack(CallBackFunction) { // объявляем функцию в теле которой другая функция, значение одной функции передаётся как аргумент в другую функцию
  CallBackFunction()
}

fnWithCallBack(someFunction)

//! Пример функции CallBack

function printMyName() {  // объявляем функцию
  console.log('Sergey')   // тело функции
}

setTimeout(printMyName, 1000) // в одну функцию вкладываем значение ранее объявленной функции

//! Правила работы с функциями

//* 1 Функции надо называть исходя из выполняемых ими задач
//* 2 Одна функция должна выполнять одну задачу
//* 3 Не рекомендуется изменять внешние относительно функции переменные ( то есть не изменять внешние объекты, а в данном случае возвращать новые или скопированные объекты)