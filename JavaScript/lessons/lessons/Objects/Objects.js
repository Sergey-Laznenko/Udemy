// Объекты это набор свойст и их значений, или набор пар: ключ: значение, при присвоении объекта как значения переменной, в переменной создаётся ССЫЛКА на этот объект

const myCity = {
  city: 'Wroclaw',
  popular: true,
  country: 'Poland'
}
//! Порядок или очерёдность свойств в объекте --> технически не имеет значения. Данных два объекта одинаковые

const myCity1 = { // Изменил значение, что бы не было ошибки
  city: 'Wroclaw',
  country: 'Poland',
  popular: true
}

//? Что бы получить доступ к значению какого то свойства объекта, надо использовать точечный оператор. Пример ->
const myCity3 = {
  city: 'Wroclaw',
  popular: true,
  country: 'Poland'
}

console.log(myCity3.city) // название объекта->точечный оператор->свойство объекта
// Результат --> Wroclaw

console.log(myCity3.popular) // 
// Результат --> true

//* Благодаря точечной записи мы так же можем изменять значение свойства, или добавлять новое свойство-значение объекту
myCity3.green = true  // Добавляем новое свойство
console.log(myCity3)
// {city: 'Wroclaw', popular: true, country: 'Poland', green: true}

myCity3.green = false  // изменяем значение свойства green
console.log(myCity3.green)
// false

//! Важно!! когда переменная объявлена посредством ключегого слова --> const, это значит что мы не можем в дальнейшем менять значение объявленной переменной. Но благодаря тому, что объекты НЕ хранятся непосредственно в переменных, а только лишь ссылки... мы МОЖЕМ менять свойства и их значение, так как мы не меняем само значение(ссылку), а лишь изменяем сам объект. Иными словами, мы мутируем объект

//* Для удаления какого либо свойства и его значения из объекта используем --> delete
delete myCity3.green
console.log(myCity3)
// {city: 'Wroclaw', popular: true, country: 'Poland'}

//? Второй вариант работы со свойствами объекта это -> квадратные скобки[] 
myCity3['green'] = true // добавляемое свойство в [скобках] и пишется как string (строка)
console.log(myCity3)
// {city: 'Wroclaw', popular: true, country: 'Poland', green: true}

//! Такой метод изменения свойства объекта используется в том случае, если это свойство ЯВЛЯЕТСЯ значением какой либо переменной
const countryPropertyName = 'Transport' // объявляем переменную
myCity3[countryPropertyName] = 'Yes' //* добавлем свойство в объект, которое в свою очередь является значением данной переменной

console.log(myCity3)
// {city: 'Wroclaw', popular: true, country: 'Poland', green: true, 'Transport: 'Yes'}

//! Подводя итог, [] мы используем если хотим добавить значение переменной как свойсто объекту, а точечную запись используем для личного указания названия свойства и дальнейшие манипуляции, так же [] можем использовать для удаления свойств

//! [] скобки РЕКОМЕНДУЕТСЯ использовать, если мы хотим манипулировать значениями другой переменной, в других случаях для изменения свойств объектов РЕКОМЕНДУЕТСЯ использоать {} скобки